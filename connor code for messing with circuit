#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_AHTX0.h>
#include <LiquidCrystal_I2C.h>

// Pin definitions
#define tempPotPin A1
#define humidPotPin A2
#define co2PotPin A3
#define greenLed 2
#define blueLed 0
#define redLed 1
#define fanPin 8

LiquidCrystal_I2C lcd(0x27, 16, 2);
Adafruit_AHTX0 aht;

// Timing
unsigned long fanStartTime = 0;
bool fanTriggered = false;

unsigned long lastSensorReadTime = 0;
const unsigned long sensorInterval = 30000; // 30 seconds

// Sensor values (stored to persist between updates)
float temperatureC = 0;
float humidityValue = 0;
int co2 = 400;

void setup() {
  pinMode(greenLed, OUTPUT);
  pinMode(blueLed, OUTPUT);
  pinMode(redLed, OUTPUT);
  pinMode(fanPin, OUTPUT);

  Serial.begin(115200);
  while (!Serial);

  Wire.begin();
  if (!aht.begin(&Wire, 0x38)) {
    Serial.println("AHT20 not found!");
    while (1);
  }

  lcd.init();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print("Starting...");
  delay(2000);

  digitalWrite(fanPin, LOW);
}

void loop() {
  unsigned long currentMillis = millis();

  // Read potentiometers
  int tempPotValue = analogRead(tempPotPin);
  int humidPotValue = analogRead(humidPotPin);
  int co2PotValue = analogRead(co2PotPin);

  float dangerTemp = map(tempPotValue, 0, 1023, 30, 100);
  float dangerHumidity = map(humidPotValue, 0, 1023, 50, 100);
  int dangerCO2 = map(co2PotValue, 0, 1023, 400, 2000);

  // === SENSOR UPDATE EVERY 30s ===
  if (currentMillis - lastSensorReadTime >= sensorInterval) {
    lastSensorReadTime = currentMillis;

    sensors_event_t humidity, temp;
    if (!aht.getEvent(&humidity, &temp)) {
      Serial.println("AHT20 read failed!");
    } else {
      temperatureC = temp.temperature;
      humidityValue = humidity.relative_humidity;

      // Estimate CO2
      co2 = 400 + (temperatureC - 20) * 20 + (humidityValue - 50) * 10;
      if (co2 < 400) co2 = 400;

      // Print to serial
      Serial.print("Temp: "); Serial.print(temperatureC); Serial.print(" C, ");
      Serial.print("Humidity: "); Serial.print(humidityValue); Serial.print(" %, ");
      Serial.print("CO2: "); Serial.print(co2); Serial.println(" ppm");

      // Update LCD
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("H:"); lcd.print(humidityValue); lcd.print("% T:"); lcd.print(temperatureC); lcd.print("C");
      lcd.setCursor(0, 1);
      lcd.print("CO2:"); lcd.print(co2); lcd.print("ppm");
    }
  }

  // === FAN TRIGGER LOGIC ===
  bool danger = (
    temperatureC >= dangerTemp ||
    humidityValue >= dangerHumidity ||
    co2 >= dangerCO2 ||
    humidityValue >= 100
  );

  if (danger && !fanTriggered) {
    digitalWrite(fanPin, HIGH); // Fan ON
    fanStartTime = currentMillis;
    fanTriggered = true;
    Serial.println("FAN TRIGGERED!");
  }

  if (fanTriggered && currentMillis - fanStartTime >= 5000) {
    digitalWrite(fanPin, LOW); // Fan OFF after 5s
    fanTriggered = false;
    Serial.println("FAN OFF");
  }

  // === LED Logic ===
  if (danger) {
    digitalWrite(redLed, HIGH);
    digitalWrite(greenLed, LOW);
    digitalWrite(blueLed, LOW);
  } else if (temperatureC >= 50 && temperatureC < dangerTemp) {
    digitalWrite(blueLed, HIGH);
    digitalWrite(greenLed, LOW);
    digitalWrite(redLed, LOW);
  } else {
    digitalWrite(greenLed, HIGH);
    digitalWrite(blueLed, LOW);
    digitalWrite(redLed, LOW);
  }

  delay(100); // Keep loop responsive
}
