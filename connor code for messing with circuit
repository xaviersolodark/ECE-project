#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_AHTX0.h>
#include <LiquidCrystal_I2C.h>

// LCD and sensor setup
LiquidCrystal_I2C lcd(0x27, 16, 2);  // Change to 0x3F if needed
Adafruit_AHTX0 aht;

// Pin definitions
#define tempPotPin A1
#define humidPotPin A2
#define co2PotPin A3
#define greenLed 2
#define blueLed 0
#define redLed 1
#define fanPin 8

// Timing variables
unsigned long fanStartTime = 0;
bool fanTriggered = false;

unsigned long lastSensorReadTime = 0;
const unsigned long sensorInterval = 30000; // 30 seconds

unsigned long lastScreenSwitch = 0;
const unsigned long screenInterval = 5000;  // 5 seconds
bool showSensorScreen = true;

// Stored sensor data
float temperatureC = 0;
float humidityValue = 0;
int co2 = 400;

void setup() {
  // Pin modes
  pinMode(greenLed, OUTPUT);
  pinMode(blueLed, OUTPUT);
  pinMode(redLed, OUTPUT);
  pinMode(fanPin, OUTPUT);

  Serial.begin(115200);
  Wire.begin();

  // Initialize sensor
  if (!aht.begin(&Wire, 0x38)) {
    Serial.println("AHT20 not found!");
    while (1);
  }

  // Initialize LCD
  lcd.init();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print("System Starting...");
  delay(2000);
  lcd.clear();
}

void loop() {
  unsigned long currentMillis = millis();

  // === Read Potentiometers ===
  int tempPotValue = analogRead(tempPotPin);
  int humidPotValue = analogRead(humidPotPin);
  int co2PotValue = analogRead(co2PotPin);

  // ✅ UPDATED RANGES:
  float dangerTemp = map(tempPotValue, 0, 1023, 20, 100);        // 20–100°C
  float dangerHumidity = map(humidPotValue, 0, 1023, 20, 100);   // 20–100%
  int dangerCO2 = map(co2PotValue, 0, 1023, 300, 2000);          // ✅ 300–2000 ppm

  // === Read AHT20 sensor every 30s ===
  if (currentMillis - lastSensorReadTime >= sensorInterval) {
    lastSensorReadTime = currentMillis;

    sensors_event_t humidity, temp;
    if (!aht.getEvent(&humidity, &temp)) {
      Serial.println("AHT20 read failed!");
    } else {
      temperatureC = temp.temperature;
      humidityValue = humidity.relative_humidity;
      co2 = 400 + (temperatureC - 20) * 20 + (humidityValue - 50) * 10;
      if (co2 < 300) co2 = 300; // Match the new minimum threshold

      // Debug print
      Serial.print("T: "); Serial.print(temperatureC); Serial.print("C, ");
      Serial.print("H: "); Serial.print(humidityValue); Serial.print("%, ");
      Serial.print("CO2: "); Serial.println(co2);
    }
  }

  // === Danger detection ===
  bool danger = (
    temperatureC >= dangerTemp ||
    humidityValue >= dangerHumidity ||
    co2 >= dangerCO2 ||
    humidityValue >= 100
  );

  if (danger && !fanTriggered) {
    digitalWrite(fanPin, HIGH);
    fanStartTime = currentMillis;
    fanTriggered = true;
    Serial.println("FAN ON");
  }

  if (fanTriggered && currentMillis - fanStartTime >= 5000) {
    digitalWrite(fanPin, LOW);
    fanTriggered = false;
    Serial.println("FAN OFF");
  }

  // === LED feedback ===
  if (danger) {
    digitalWrite(redLed, HIGH);
    digitalWrite(blueLed, LOW);
    digitalWrite(greenLed, LOW);
  } else if (temperatureC >= 50 && temperatureC < dangerTemp) {
    digitalWrite(blueLed, HIGH);
    digitalWrite(redLed, LOW);
    digitalWrite(greenLed, LOW);
  } else {
    digitalWrite(greenLed, HIGH);
    digitalWrite(blueLed, LOW);
    digitalWrite(redLed, LOW);
  }

  // === LCD display switching ===
  if (currentMillis - lastScreenSwitch >= screenInterval) {
    lastScreenSwitch = currentMillis;
    showSensorScreen = !showSensorScreen;

    lcd.clear();
    if (showSensorScreen) {
      // Show live sensor readings
      lcd.setCursor(0, 0);
      lcd.print("T:"); lcd.print(temperatureC, 1);
      lcd.print("C H:"); lcd.print(humidityValue, 0);
      lcd.setCursor(0, 1);
      lcd.print("CO2:"); lcd.print(co2); lcd.print("ppm");
    } else {
      // Show thresholds from pots
      lcd.setCursor(0, 0);
      lcd.print("T>"); lcd.print(dangerTemp, 0);
      lcd.print(" H>"); lcd.print(dangerHumidity, 0);
      lcd.setCursor(0, 1);
      lcd.print("CO2>"); lcd.print(dangerCO2); lcd.print("ppm");
    }
  }

  delay(100); // Keep loop responsive
}
